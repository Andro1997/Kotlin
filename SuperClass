Чтобы класс можно было использовать в качестве суперкласса, необходимо явно сообщить об этом компилятору. 
Для этого перед именем класса — и любым свойством и функцией, которые вы собираетесь переопределять, — ставится ключевое слово open

Чтобы класс наследовал от другого класса, добавьте в заголовок класса двоеточие (:), за которым следует имя суперкласса.

Чтобы использовать класс в качестве суперкласса, необходимо объявить его открытым
(open). Все свойства и функции, которые
вы хотите переопределить, также должны
быть объявлены открытыми

Используйте : для назначения суперкласса в объявлении подкласса.

 Чтобы переопределить свойства и функции в подклассе, снабдите их префиксом
override. Когда вы переопределяете свойство, его тип должен быть совместим со свойством суперкласса, а тип возвращаемого

значения должен быть совместим с возвращаемым типом суперкласса.
 Переопределенные функции и свойства остаются открытыми до тех пор, пока не будут
объявлены final.

Функции можно пометить как абстрактные при помощи префикса abstract.

open class Animal {

   open val image = ""
   open val food = ""
   open val habitat = ""
    var hunger = 10

   open fun makeNoise(){
        println("The Animal is making a noise")
    }
   open fun eat(){
        println("The Animal is eating")
    }
   open fun roam(){
        println("The Animal is roaming")
    }
    fun sleep(){
        println("The Animal is sleeping")
    }

}

class Hippo : Animal() {
    override val image = "hippo.jpg"
    override val food = "grass"
    override val habitat = "water"

    override fun makeNoise() {
        println("Grunt! Grunt!")
    }

    override fun eat() {
        println("The hippo is eating $food")
    }
}

open class Canine : Animal() {
    override fun roam(){
        println("The Canine is roaming")
    }
}

class Wolf : Canine(){
    override val image = "wolf.jpg"
    override val food = "meet"
    override val habitat = "forests"

    override fun makeNoise() {
        println("Hooooooow")
    }

    override fun eat(){
        println("The wolf is eating $food")
    }
}

class Vet {
    fun giveShot(animal: Animal){
        animal.makeNoise()
    }
}
fun main(args:Array<String>){
    val animals = arrayOf(Hippo(), Wolf())
    for (item in animals) {
        item.roam()
        item.eat()
    }
    val vet = Vet()
    val wolf = Wolf()
    val hippo = Hippo()
    vet.giveShot(wolf)
    vet.giveShot(hippo)
}


____________________________________________
The Animal is roaming
The hippo is eating grass
The Canine is roaming
The wolf is eating meet
Hooooooow
Grunt! Grunt!
